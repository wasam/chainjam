<!DOCTYPE html>
<!-- saved from url=(0060)http://f.cl.ly/items/3O2G0k3U213a1y3z1I0v/jw-tail-chase.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
<script>

// hopefully I got the API calls right.
// I’m unable to get the wrapper working so …
// but I wrapped the API calls in these functions.

function jwGameStart() {
    console.log("jwGameStart");
    try {
        GameStart();
    } catch(error) {
        console.log("no wrapper");
    }
}
function jwPlayerPoints(player, points) {
    console.log("jwPlayerPoints: "+player+", "+points);
    try {
        if(player==0) {
            PlayerOnePoints(points);
        } else if(player==1) {
            PlayerTwoPoints(points);
        } else if(player==2) {
            PlayerThreePoints(points);
        } else if(player==3) {
            PlayerFourPoints(points);
        }
    } catch(error) {
        console.log("no wrapper");
    }
}

</script>

<meta charset="utf-8">
<title>Tail Chase</title>

<style>

* {
    margin: 0;
    padding: 0;
    line-height: 0;
    overflow: hidden;
}

</style>

<style type="text/css"></style></head>

<body>
<canvas id="game" width="1600" height="732">
    Lol, your browser’s so old. Well, on to the next game I suppose.
</canvas>

<script>

CanvasRenderingContext2D.prototype.fillCircle = function(x, y, radius) {
    this.beginPath();
    this.arc(x, y, radius, 0, 2*Math.PI, false);
    this.fill();
}
CanvasRenderingContext2D.prototype.strokeCircle = function(x, y, radius) {
    this.beginPath();
    this.arc(x, y, radius, 0, 2*Math.PI, false);
    this.stroke();
}

</script>

<script>

var w = window,
    d = document,
    e = d.documentElement,
    g = d.getElementsByTagName('body')[0],
    width  = w.innerWidth || e.clientWidth || g.clientWidth,
    height = w.innerHeight|| e.clientHeight|| g.clientHeight,
    playerRadius = 14,
    pointBallRadius = Math.floor(playerRadius*0.4),
    canvas = d.getElementById("game"),
    context = canvas.getContext("2d"),
    playerColours = ["#313232", "#27ADE3", "#EE368A", "#B0D136", "#eda539"],
    playerKeys = [{left: {value: 37, pressed: false}, right: {value: 39, pressed: false}},
                  {left: {value: 74, pressed: false}, right: {value: 76, pressed: false}},
                  {left: {value: 65, pressed: false}, right: {value: 68, pressed: false}},
                  {left: {value: 70, pressed: false}, right: {value: 72, pressed: false}}],
    players,
    pointBalls,
    fri = 0.2,
    acc = 24;

init();

function init() {
    canvas.width = width;
    canvas.height = height;
    
    initPlayers();
    initPointBalls();
    
    w.setInterval(main, 30);
    w.onkeydown = keyDown;
    w.onkeyup = keyUp;
    draw();
    
    jwGameStart();
}
function initPlayers() {
    players = [];
    for(var i=0; i<4; i++) {
        var p = {};
        p.x = width*(i%2)+playerRadius*8*(1-2*(i%2));
        p.y = height*(i<2)+playerRadius*8*(1-2*(i<2));
        p.vx = 0;
        p.vy = 0;
        var xdis = width/2-p.x,
            ydis = height/2-p.y;
        p.ang = Math.atan2(ydis,xdis);
        players.push(p);
    }
}
function initPointBalls() {
    pointBalls = [];
    for(var i=0; i<5; i++) {
        pointBalls.push([]);
        for(var j=0; j<(i===0?6:1); j++) {
            var b = {};
            try {
                b.x = players[i-1].x;
                b.y = players[i-1].y;
            } catch(e) {
                b.x = width/2-playerRadius+playerRadius*(1-Math.random()*2)*6;
                b.y = height/2-playerRadius+playerRadius*(1-Math.random()*2)*6;
            }
            b.vx = 0;
            b.vy = 0;
            pointBalls[i].push(b);
        }
    }
}

function main() {
    movePlayers();
    movePointBalls();
    //collisionTestPlayers();
    collisionTestPointBalls();
    draw();
}
function movePlayers() {
    for(var i=0; i<4; i++) {
        var p = players[i];
        p.x += p.vx;
        p.y += p.vy;
        p.vx += Math.cos(p.ang)*acc*(1+pointBalls[i+1].length*0.06);
        p.vy += Math.sin(p.ang)*acc*(1+pointBalls[i+1].length*0.06);
        p.vx *= fri;
        p.vy *= fri;
        if(playerKeys[i].left.pressed) {
            p.ang -= (Math.PI*2)*0.0005*acc*(1+pointBalls[i+1].length*0.05);
        }
        if(playerKeys[i].right.pressed) {
            p.ang += (Math.PI*2)*0.0005*acc*(1+pointBalls[i+1].length*0.05);
        }
        
        if(p.x<playerRadius) {
            p.vx = Math.abs(p.vx)+0.5;
            p.ang = Math.atan2(p.vy, p.vx);
        } else if(p.x>width-playerRadius) {
            p.vx = -Math.abs(p.vx)-0.5;
            p.ang = Math.atan2(p.vy, p.vx);
        } else if(p.y<playerRadius) {
            p.vy = Math.abs(p.vy)+0.5;
            p.ang = Math.atan2(p.vy, p.vx);
        } else if(p.y>height-playerRadius) {
            p.vy = -Math.abs(p.vy)-0.5;
            p.ang = Math.atan2(p.vy, p.vx);
        }
    }
}
function movePointBalls() {
    for(var i=0; i<5; i++) {
        if(i>0) {
            var p = players[i-1];
            for(var j=0; j<pointBalls[i].length; j++) {
                var b = pointBalls[i][j],
                    xdis,
                    ydis;
                if(j==0) {
                    xdis = p.x-b.x;
                    ydis = p.y-b.y;
                } else {
                    xdis = pointBalls[i][j-1].x-b.x;
                    ydis = pointBalls[i][j-1].y-b.y;
                }
                
                b.x += b.vx;
                b.y += b.vy;
                b.vx += xdis*(acc*0.03);
                b.vy += ydis*(acc*0.03);
                b.vx *= fri;
                b.vy *= fri;
            }
        }
    }
}
function collisionTestPlayers() {
    // not used
    for(var i=0; i<4; i++) {
        var p = players[i];
        for(var j=i+1; j<4; j++) {
            var p2 = players[j],
                xdis = p.x-p2.x,
                ydis = p.y-p2.y;
            
            if(xdis*xdis+ydis*ydis < playerRadius*playerRadius) {
                p.ang += Math.PI;
                p.vx *= -1;
                p.vy *= -1;
                p2.ang += Math.PI;
                p2.vx *= -1;
                p2.vy *= -1;
                
                p.x += p.vx;
                p.y += p.vy;
                p2.x += p2.vx;
                p2.y += p2.vy;
            }
        }
    }
}
function collisionTestPointBalls() {
    for(var i=0; i<4; i++) {
        var p = players[i];
        for(var j=0; j<5; j++) {
            if(i!==j-1) {
                for(var k=0; k<pointBalls[j].length; k++) {
                    var b = pointBalls[j][k],
                        xdis = p.x-b.x,
                        ydis = p.y-b.y;
                    
                    if(xdis*xdis+ydis*ydis < playerRadius*playerRadius+pointBallRadius*pointBallRadius) {
                        pointBalls[j].splice(k,1);
                        pointBalls[i+1].push(b);
                        if(j) {
                            jwPlayerPoints(j-1, -1);
                        }
                        jwPlayerPoints(i, 1);
                    }
                }
            }
        }
    }
}

function keyDown(event) {
    for(var i=0; i<4; i++) {
        if(event.which === playerKeys[i].left.value) {
            return playerKeys[i].left.pressed = true;
        } else if(event.which === playerKeys[i].right.value) {
            return playerKeys[i].right.pressed = true;
        }
    }
}
function keyUp(event) {
    for(var i=0; i<4; i++) {
        if(event.which === playerKeys[i].left.value) {
            return playerKeys[i].left.pressed = false;
        } else if(event.which === playerKeys[i].right.value) {
            return playerKeys[i].right.pressed = false;
        }
    }
}

function draw() {
    context.fillStyle = "#f7f3d9";
    context.fillRect(0,0, width,height);
    
    drawPlayers();
    drawPointBalls();
}
function drawPlayers() {
    for(var i=0; i<4; i++) {
        var p = players[i];
        context.fillStyle = playerColours[i];
        context.fillCircle(p.x, p.y, playerRadius);
    }
}
function drawPointBalls() {
    for(var i=0; i<5; i++) {
        if(i==0) {
            context.fillStyle = playerColours[4];
        } else {
            context.fillStyle = playerColours[i-1];
        }

        for(var j=0; j<pointBalls[i].length; j++) {
            var b = pointBalls[i][j];
            context.fillCircle(b.x, b.y, pointBallRadius);
        }
    }
}

</script>



</body></html>